// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/geocode-srv/proto/google/google.proto

/*
Package google is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/geocode-srv/proto/google/google.proto

It has these top-level messages:
	Point
	Bounds
	AddressComponent
	Geometry
	Result
	GeocodeRequest
	GeocodeResponse
	ReverseRequest
	ReverseResponse
*/
package google

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng" json:"lng,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Point) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Point) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type Bounds struct {
	Northeast *Point `protobuf:"bytes,1,opt,name=northeast" json:"northeast,omitempty"`
	Southwest *Point `protobuf:"bytes,2,opt,name=southwest" json:"southwest,omitempty"`
}

func (m *Bounds) Reset()                    { *m = Bounds{} }
func (m *Bounds) String() string            { return proto.CompactTextString(m) }
func (*Bounds) ProtoMessage()               {}
func (*Bounds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Bounds) GetNortheast() *Point {
	if m != nil {
		return m.Northeast
	}
	return nil
}

func (m *Bounds) GetSouthwest() *Point {
	if m != nil {
		return m.Southwest
	}
	return nil
}

type AddressComponent struct {
	LongName  string   `protobuf:"bytes,1,opt,name=long_name,json=longName" json:"long_name,omitempty"`
	ShortName string   `protobuf:"bytes,2,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	Types     []string `protobuf:"bytes,3,rep,name=types" json:"types,omitempty"`
}

func (m *AddressComponent) Reset()                    { *m = AddressComponent{} }
func (m *AddressComponent) String() string            { return proto.CompactTextString(m) }
func (*AddressComponent) ProtoMessage()               {}
func (*AddressComponent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddressComponent) GetLongName() string {
	if m != nil {
		return m.LongName
	}
	return ""
}

func (m *AddressComponent) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AddressComponent) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type Geometry struct {
	Bounds       *Bounds  `protobuf:"bytes,1,opt,name=bounds" json:"bounds,omitempty"`
	Location     *Point   `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	LocationType string   `protobuf:"bytes,3,opt,name=location_type,json=locationType" json:"location_type,omitempty"`
	Viewport     *Bounds  `protobuf:"bytes,4,opt,name=viewport" json:"viewport,omitempty"`
	PartialMatch bool     `protobuf:"varint,5,opt,name=partial_match,json=partialMatch" json:"partial_match,omitempty"`
	PlaceId      string   `protobuf:"bytes,6,opt,name=place_id,json=placeId" json:"place_id,omitempty"`
	Types        []string `protobuf:"bytes,7,rep,name=types" json:"types,omitempty"`
}

func (m *Geometry) Reset()                    { *m = Geometry{} }
func (m *Geometry) String() string            { return proto.CompactTextString(m) }
func (*Geometry) ProtoMessage()               {}
func (*Geometry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Geometry) GetBounds() *Bounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *Geometry) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Geometry) GetLocationType() string {
	if m != nil {
		return m.LocationType
	}
	return ""
}

func (m *Geometry) GetViewport() *Bounds {
	if m != nil {
		return m.Viewport
	}
	return nil
}

func (m *Geometry) GetPartialMatch() bool {
	if m != nil {
		return m.PartialMatch
	}
	return false
}

func (m *Geometry) GetPlaceId() string {
	if m != nil {
		return m.PlaceId
	}
	return ""
}

func (m *Geometry) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type Result struct {
	AddressComponents []*AddressComponent `protobuf:"bytes,1,rep,name=address_components,json=addressComponents" json:"address_components,omitempty"`
	FormattedAddress  string              `protobuf:"bytes,2,opt,name=formatted_address,json=formattedAddress" json:"formatted_address,omitempty"`
	Geometry          *Geometry           `protobuf:"bytes,3,opt,name=geometry" json:"geometry,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Result) GetAddressComponents() []*AddressComponent {
	if m != nil {
		return m.AddressComponents
	}
	return nil
}

func (m *Result) GetFormattedAddress() string {
	if m != nil {
		return m.FormattedAddress
	}
	return ""
}

func (m *Result) GetGeometry() *Geometry {
	if m != nil {
		return m.Geometry
	}
	return nil
}

type GeocodeRequest struct {
	Address    string            `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Components map[string]string `protobuf:"bytes,2,rep,name=components" json:"components,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Bounds     *Bounds           `protobuf:"bytes,3,opt,name=bounds" json:"bounds,omitempty"`
	Language   string            `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Region     string            `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
}

func (m *GeocodeRequest) Reset()                    { *m = GeocodeRequest{} }
func (m *GeocodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GeocodeRequest) ProtoMessage()               {}
func (*GeocodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GeocodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GeocodeRequest) GetComponents() map[string]string {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *GeocodeRequest) GetBounds() *Bounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *GeocodeRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *GeocodeRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type GeocodeResponse struct {
	Results []*Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Status  string    `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GeocodeResponse) Reset()                    { *m = GeocodeResponse{} }
func (m *GeocodeResponse) String() string            { return proto.CompactTextString(m) }
func (*GeocodeResponse) ProtoMessage()               {}
func (*GeocodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GeocodeResponse) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GeocodeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ReverseRequest struct {
	Latlng       *Point   `protobuf:"bytes,1,opt,name=latlng" json:"latlng,omitempty"`
	PlaceId      string   `protobuf:"bytes,2,opt,name=place_id,json=placeId" json:"place_id,omitempty"`
	Language     string   `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	ResultType   []string `protobuf:"bytes,4,rep,name=result_type,json=resultType" json:"result_type,omitempty"`
	LocationType []string `protobuf:"bytes,5,rep,name=location_type,json=locationType" json:"location_type,omitempty"`
}

func (m *ReverseRequest) Reset()                    { *m = ReverseRequest{} }
func (m *ReverseRequest) String() string            { return proto.CompactTextString(m) }
func (*ReverseRequest) ProtoMessage()               {}
func (*ReverseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReverseRequest) GetLatlng() *Point {
	if m != nil {
		return m.Latlng
	}
	return nil
}

func (m *ReverseRequest) GetPlaceId() string {
	if m != nil {
		return m.PlaceId
	}
	return ""
}

func (m *ReverseRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *ReverseRequest) GetResultType() []string {
	if m != nil {
		return m.ResultType
	}
	return nil
}

func (m *ReverseRequest) GetLocationType() []string {
	if m != nil {
		return m.LocationType
	}
	return nil
}

type ReverseResponse struct {
	Results []*Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Status  string    `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ReverseResponse) Reset()                    { *m = ReverseResponse{} }
func (m *ReverseResponse) String() string            { return proto.CompactTextString(m) }
func (*ReverseResponse) ProtoMessage()               {}
func (*ReverseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReverseResponse) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ReverseResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Point)(nil), "Point")
	proto.RegisterType((*Bounds)(nil), "Bounds")
	proto.RegisterType((*AddressComponent)(nil), "AddressComponent")
	proto.RegisterType((*Geometry)(nil), "Geometry")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*GeocodeRequest)(nil), "GeocodeRequest")
	proto.RegisterType((*GeocodeResponse)(nil), "GeocodeResponse")
	proto.RegisterType((*ReverseRequest)(nil), "ReverseRequest")
	proto.RegisterType((*ReverseResponse)(nil), "ReverseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Google service

type GoogleClient interface {
	Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error)
	ReverseGeocode(ctx context.Context, in *ReverseRequest, opts ...grpc.CallOption) (*ReverseResponse, error)
}

type googleClient struct {
	cc *grpc.ClientConn
}

func NewGoogleClient(cc *grpc.ClientConn) GoogleClient {
	return &googleClient{cc}
}

func (c *googleClient) Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error) {
	out := new(GeocodeResponse)
	err := grpc.Invoke(ctx, "/Google/Geocode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleClient) ReverseGeocode(ctx context.Context, in *ReverseRequest, opts ...grpc.CallOption) (*ReverseResponse, error) {
	out := new(ReverseResponse)
	err := grpc.Invoke(ctx, "/Google/ReverseGeocode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Google service

type GoogleServer interface {
	Geocode(context.Context, *GeocodeRequest) (*GeocodeResponse, error)
	ReverseGeocode(context.Context, *ReverseRequest) (*ReverseResponse, error)
}

func RegisterGoogleServer(s *grpc.Server, srv GoogleServer) {
	s.RegisterService(&_Google_serviceDesc, srv)
}

func _Google_Geocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServer).Geocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Google/Geocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServer).Geocode(ctx, req.(*GeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Google_ReverseGeocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServer).ReverseGeocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Google/ReverseGeocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServer).ReverseGeocode(ctx, req.(*ReverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Google_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Google",
	HandlerType: (*GoogleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Geocode",
			Handler:    _Google_Geocode_Handler,
		},
		{
			MethodName: "ReverseGeocode",
			Handler:    _Google_ReverseGeocode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/geocode-srv/proto/google/google.proto",
}

func init() {
	proto.RegisterFile("github.com/micro/geocode-srv/proto/google/google.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xed, 0x8a, 0xd3, 0x40,
	0x14, 0xdd, 0x34, 0xdb, 0x24, 0xbd, 0x5d, 0x77, 0xbb, 0x83, 0x48, 0xac, 0xe8, 0xae, 0x59, 0x85,
	0xc2, 0x62, 0x0a, 0x15, 0x45, 0x04, 0xf1, 0x0b, 0x59, 0x04, 0x15, 0x09, 0xfb, 0xbf, 0x4c, 0x93,
	0x31, 0x0d, 0x26, 0x33, 0x71, 0x66, 0xd2, 0xa5, 0x2f, 0xe3, 0x1b, 0xf8, 0x6c, 0x3e, 0x82, 0x32,
	0x93, 0x49, 0xda, 0x04, 0xff, 0xf9, 0x2b, 0x73, 0xcf, 0x9d, 0xb9, 0x73, 0xee, 0xb9, 0x67, 0x02,
	0xcf, 0xd3, 0x4c, 0xae, 0xab, 0x55, 0x18, 0xb3, 0x62, 0x5e, 0x64, 0x31, 0x67, 0xf3, 0x94, 0xb0,
	0x98, 0x25, 0xe4, 0x89, 0xe0, 0x9b, 0x79, 0xc9, 0x99, 0x64, 0xf3, 0x94, 0xb1, 0x34, 0x27, 0xe6,
	0x13, 0x6a, 0x2c, 0xb8, 0x84, 0xe1, 0x57, 0x96, 0x51, 0x89, 0x26, 0x60, 0xe7, 0x58, 0xfa, 0xd6,
	0xb9, 0x35, 0xb3, 0x22, 0xb5, 0xd4, 0x08, 0x4d, 0xfd, 0x81, 0x41, 0x68, 0x1a, 0x5c, 0x83, 0xf3,
	0x8e, 0x55, 0x34, 0x11, 0xe8, 0x11, 0x8c, 0x28, 0xe3, 0x72, 0x4d, 0xb0, 0xa8, 0xcf, 0x8c, 0x17,
	0x4e, 0xa8, 0x0b, 0x45, 0xbb, 0x84, 0xda, 0x25, 0x58, 0x25, 0xd7, 0x37, 0x44, 0x48, 0x5d, 0x67,
	0x6f, 0x57, 0x9b, 0x08, 0x12, 0x98, 0xbc, 0x4d, 0x12, 0x4e, 0x84, 0x78, 0xcf, 0x8a, 0x92, 0x51,
	0x42, 0x25, 0xba, 0x07, 0xa3, 0x9c, 0xd1, 0x74, 0x49, 0x71, 0x41, 0x74, 0xfd, 0x51, 0xe4, 0x29,
	0xe0, 0x0b, 0x2e, 0x08, 0xba, 0x0f, 0x20, 0xd6, 0x8c, 0xcb, 0x3a, 0x3b, 0xd0, 0xd9, 0x91, 0x46,
	0x74, 0xfa, 0x36, 0x0c, 0xe5, 0xb6, 0x24, 0xc2, 0xb7, 0xcf, 0xed, 0xd9, 0x28, 0xaa, 0x83, 0xe0,
	0xb7, 0x05, 0xde, 0x15, 0x61, 0x05, 0x91, 0x7c, 0x8b, 0xce, 0xc0, 0x59, 0xe9, 0x46, 0x0c, 0x77,
	0x37, 0xac, 0xfb, 0x8a, 0x0c, 0x8c, 0x02, 0xf0, 0x72, 0x16, 0x63, 0x99, 0x31, 0xda, 0x23, 0xde,
	0xe2, 0xe8, 0x02, 0x6e, 0x35, 0xeb, 0xa5, 0xba, 0xc3, 0xb7, 0x35, 0x93, 0xa3, 0x06, 0xbc, 0xde,
	0x96, 0x04, 0x5d, 0x80, 0xb7, 0xc9, 0xc8, 0x4d, 0xc9, 0xb8, 0xf4, 0x0f, 0xbb, 0x77, 0xb5, 0x09,
	0x55, 0xa9, 0xc4, 0x5c, 0x66, 0x38, 0x5f, 0x16, 0x58, 0xc6, 0x6b, 0x7f, 0x78, 0x6e, 0xcd, 0xbc,
	0xe8, 0xc8, 0x80, 0x9f, 0x15, 0x86, 0xee, 0x82, 0x57, 0xe6, 0x38, 0x26, 0xcb, 0x2c, 0xf1, 0x1d,
	0x7d, 0x93, 0xab, 0xe3, 0x8f, 0xc9, 0xae, 0x63, 0x77, 0xbf, 0xe3, 0x9f, 0x16, 0x38, 0x11, 0x11,
	0x55, 0x2e, 0xd1, 0x1b, 0x40, 0xb8, 0x96, 0x78, 0x19, 0x37, 0x1a, 0xab, 0xde, 0xed, 0xd9, 0x78,
	0x71, 0x1a, 0xf6, 0xd5, 0x8f, 0x4e, 0x71, 0x0f, 0x11, 0xe8, 0x12, 0x4e, 0xbf, 0x31, 0x5e, 0x60,
	0x29, 0x49, 0xb2, 0x34, 0x69, 0x23, 0xfd, 0xa4, 0x4d, 0x98, 0x42, 0xe8, 0x31, 0x78, 0xa9, 0x91,
	0x5a, 0x8b, 0x32, 0x5e, 0x8c, 0xc2, 0x46, 0xfb, 0xa8, 0x4d, 0x05, 0x7f, 0x2c, 0x38, 0xbe, 0xaa,
	0x5d, 0x1a, 0x91, 0x1f, 0x15, 0x11, 0x12, 0xf9, 0xe0, 0x36, 0xc5, 0xeb, 0xa9, 0x37, 0x21, 0x7a,
	0x0d, 0xb0, 0x47, 0x7d, 0xa0, 0xa9, 0x9f, 0x85, 0xdd, 0xe3, 0xe1, 0x8e, 0xf0, 0x07, 0xaa, 0xee,
	0xda, 0x3b, 0xb2, 0x37, 0x73, 0xfb, 0xdf, 0x33, 0x9f, 0x82, 0x97, 0x63, 0x9a, 0x56, 0x38, 0x25,
	0x7a, 0x54, 0xca, 0x72, 0x26, 0x46, 0x77, 0xc0, 0xe1, 0x24, 0x55, 0x6e, 0x18, 0xea, 0x8c, 0x89,
	0xa6, 0xaf, 0xe0, 0xa4, 0x77, 0xa7, 0x7a, 0x36, 0xdf, 0xc9, 0xd6, 0xd0, 0x57, 0x4b, 0x35, 0x9e,
	0x0d, 0xce, 0xab, 0xc6, 0xaa, 0x75, 0xf0, 0x72, 0xf0, 0xc2, 0x0a, 0x3e, 0xc1, 0x49, 0xdb, 0x81,
	0x28, 0x19, 0x15, 0x04, 0x3d, 0x04, 0x97, 0xeb, 0xa1, 0x35, 0xf3, 0x71, 0xc3, 0x7a, 0x88, 0x51,
	0x83, 0x2b, 0x32, 0x42, 0x62, 0x59, 0x35, 0x03, 0x30, 0x51, 0xf0, 0xcb, 0x82, 0xe3, 0x88, 0x6c,
	0x08, 0x17, 0xad, 0x9e, 0x0f, 0xc0, 0xc9, 0xb1, 0x54, 0xcf, 0xb8, 0xfb, 0x48, 0x0d, 0xda, 0x31,
	0xd5, 0xa0, 0x6b, 0xaa, 0x7d, 0x39, 0xec, 0x9e, 0x1c, 0x67, 0x30, 0xae, 0xc9, 0xd4, 0xc6, 0x3f,
	0xd4, 0xb6, 0x83, 0x1a, 0x32, 0xb6, 0xef, 0xbd, 0x8d, 0xa1, 0xde, 0xd2, 0x79, 0x1b, 0xaa, 0xfb,
	0x96, 0xee, 0x7f, 0x77, 0xbf, 0x60, 0xe0, 0x5c, 0xe9, 0x3f, 0x1b, 0x0a, 0xc1, 0x35, 0xaa, 0xa2,
	0x93, 0x9e, 0x43, 0xa6, 0x93, 0xb0, 0x27, 0x78, 0x70, 0x80, 0x9e, 0xb5, 0xb2, 0xed, 0x8e, 0x75,
	0x75, 0x9c, 0x4e, 0xc2, 0x1e, 0xd3, 0xe0, 0x60, 0xe5, 0xe8, 0x3f, 0xe8, 0xd3, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xb5, 0xfb, 0x21, 0x93, 0x7b, 0x05, 0x00, 0x00,
}
